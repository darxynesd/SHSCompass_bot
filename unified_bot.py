# unified_bot.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import json
import re
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_CATEGORY = range(1)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    try:
        with open('guides_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open('guides_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def build_hierarchy_path(hashtags):
    """–°—Ç—Ä–æ–∏—Ç –ø—É—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    return " > ".join(hashtags)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å)
async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post or not update.channel_post.photo:
        return

    if str(update.channel_post.chat.id) != str(config.CHANNEL_ID):
        return

    caption = update.channel_post.caption or ""
    hashtags = re.findall(r'#(\w+)', caption)

    if len(hashtags) < 1:
        await update.channel_post.reply_text("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–µ—à—Ç–µ–≥: #–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        return

    file_id = update.channel_post.photo[-1].file_id
    data = load_data()

    # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    current_level = data
    for i, hashtag in enumerate(hashtags):
        if hashtag not in current_level:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ—à—Ç–µ–≥ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ñ–æ—Ç–æ
            if i == len(hashtags) - 1:
                current_level[hashtag] = {"photos": [file_id]}
            else:
                current_level[hashtag] = {}
        elif i == len(hashtags) - 1:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ—à—Ç–µ–≥ –∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if "photos" not in current_level[hashtag]:
                current_level[hashtag]["photos"] = []
            current_level[hashtag]["photos"].append(file_id)
        
        current_level = current_level[hashtag]

    save_data(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    hierarchy_path = build_hierarchy_path(hashtags)
    response_text = (
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
        f"üìç –ü—É—Ç—å: {hierarchy_path}\n"
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(current_level['photos']) if 'photos' in current_level else 0}"
    )
    
    await update.channel_post.reply_text(response_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Ä–∞—Å—Å—ã–ª–∫–∞)
async def handle_channel_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post or not update.channel_post.text:
        return
    
    if str(update.channel_post.chat.id) != str(config.CHANNEL_ID):
        return
    
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    except FileNotFoundError:
        return
    
    message_text = update.channel_post.text
    
    for user_id in user_data.get('users', []):
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            await asyncio.sleep(0.1)
        except:
            continue

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
def create_two_column_keyboard(items):
    if not items:
        return []
        
    keyboard = []
    row = []
    
    for i, item in enumerate(items):
        row.append(KeyboardButton(item))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    return keyboard

def get_current_level_data(data, current_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
    current_level = data
    for part in current_path:
        if part in current_level:
            current_level = current_level[part]
        else:
            return None
    return current_level

def get_available_choices(current_data):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    choices = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è 'photos')
    for key in current_data.keys():
        if key != 'photos':
            choices.append(f"üìÅ {key}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'photos' in current_data and current_data['photos']:
        choices.append("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if choices:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        choices.append("‚Üê –ù–∞–∑–∞–¥")
        choices.append("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    return choices

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post:
        return
    
    data = load_data()
    
    if not data:
        await update.message.reply_text('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≥–∞–π–¥–æ–≤!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_path'] = []
    
    choices = get_available_choices(data)
    
    if not choices:
        await update.message.reply_text('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≥–∞–π–¥–æ–≤!')
        return ConversationHandler.END
    
    keyboard = create_two_column_keyboard(choices)
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=reply_markup
    )
    return SELECTING_CATEGORY

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post:
        return SELECTING_CATEGORY
    
    user_choice = update.message.text
    data = load_data()
    current_path = context.user_data.get('current_path', [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = get_current_level_data(data, current_path)
    if current_data is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return await start(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if user_choice == "‚Üê –ù–∞–∑–∞–¥":
        if current_path:
            current_path.pop()
            context.user_data['current_path'] = current_path
    
    elif user_choice == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data['current_path'] = []
        current_path = []
    
    elif user_choice == "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        if 'photos' in current_data and current_data['photos']:
            for i, file_id in enumerate(current_data['photos'], 1):
                await update.message.reply_photo(
                    photo=file_id,
                    caption=f"üì∏ –§–æ—Ç–æ {i}/{len(current_data['photos'])}\n"
                           f"üìç {build_hierarchy_path(current_path) if current_path else '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}"
                )
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
        return SELECTING_CATEGORY
    
    elif user_choice.startswith("üìÅ "):
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_name = user_choice[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        current_path.append(category_name)
        context.user_data['current_path'] = current_path
    
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return SELECTING_CATEGORY
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if current_path:
        current_data = get_current_level_data(data, current_path)
    else:
        current_data = data
    
    if current_data is None:
        await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        context.user_data['current_path'] = []
        current_data = data
    
    choices = get_available_choices(current_data)
    
    if not choices:
        await update.message.reply_text("üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        if current_path:
            current_path.pop()
            context.user_data['current_path'] = current_path
            current_data = get_current_level_data(data, current_path)
            choices = get_available_choices(current_data)
        else:
            choices = get_available_choices(data)
    
    keyboard = create_two_column_keyboard(choices)
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if current_path:
        await update.message.reply_text(
            f"üìç –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {build_hierarchy_path(current_path)}\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            'üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=reply_markup
        )
    
    return SELECTING_CATEGORY

def main():
    application = Application.builder().token(config.ADMIN_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.PHOTO, 
        handle_channel_post
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.TEXT,
        handle_channel_text
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_selection)
            ],
        },
        fallbacks=[],
    )
    
    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    application.run_polling()

if __name__ == '__main__':
    main()