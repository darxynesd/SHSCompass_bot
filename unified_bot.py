# unified_bot.py
import json
import re
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_STORY, SELECTING_SERIES = range(2)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    try:
        with open('guides_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"guides_data.json": {}}

def save_data(data):
    with open('guides_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å)
async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post or not update.channel_post.photo:
        return

    if str(update.channel_post.chat.id) != str(config.CHANNEL_ID):
        return

    caption = update.channel_post.caption or ""
    hashtags = re.findall(r'#(\w+)', caption)

    if len(hashtags) < 2:
        await update.channel_post.reply_text("–ù—É–∂–Ω—ã –¥–≤–∞ —Ö–µ—à—Ç–µ–≥–∞: #–ò—Å—Ç–æ—Ä–∏—è #–°–µ—Ä–∏—è")
        return

    story_name, series_name = hashtags[0], hashtags[1]
    file_id = update.channel_post.photo[-1].file_id

    data = load_data()
    
    if story_name not in data['guides_data.json']:
        data['guides_data.json'][story_name] = {"series": {}}
    
    if series_name not in data['guides_data.json'][story_name]['series']:
        data['guides_data.json'][story_name]['series'][series_name] = {"photos": []}
    
    data['guides_data.json'][story_name]['series'][series_name]["photos"].append(file_id)
    save_data(data)

    await update.channel_post.reply_text(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–π–¥!\n"
        f"üéÆ –ì–∞–π–¥: {story_name}\n"
        f"üìñ –°–µ—Ä–∏—è: {series_name}\n"
        f"üì∏ –§–æ—Ç–æ: {len(data['guides_data.json'][story_name]['series'][series_name]['photos'])}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Ä–∞—Å—Å—ã–ª–∫–∞)
async def handle_channel_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post or not update.channel_post.text:
        return
    
    if str(update.channel_post.chat.id) != str(config.CHANNEL_ID):
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    except FileNotFoundError:
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    
    message_text = update.channel_post.text
    
    for user_id in user_data.get('users', []):
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
def create_two_column_keyboard(items):
    keyboard = []
    row = []
    
    for i, item in enumerate(items):
        row.append(KeyboardButton(item))
        # –ö–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        keyboard.append(row)
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–∞–±–ª–∏–∫ —á–∞—Å—Ç—å)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if update.channel_post:
        return
    
    data = load_data()
    
    if not data['guides_data.json']:
        await update.message.reply_text('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≥–∞–π–¥–æ–≤!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏—è–º–∏ (–ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É)
    story_names = list(data['guides_data.json'].keys())
    keyboard = create_two_column_keyboard(story_names)
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        'üéÆ –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é:',
        reply_markup=reply_markup
    )
    return SELECTING_STORY

async def handle_story_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.channel_post:
        return SELECTING_STORY
    
    story_name = update.message.text
    data = load_data()
    
    if story_name not in data['guides_data.json']:
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        return SELECTING_STORY
    
    context.user_data['selected_story'] = story_name
    story_data = data['guides_data.json'][story_name]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–∏—è–º–∏ (–ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É)
    series_buttons = []
    for series_name in story_data['series']:
        photo_count = len(story_data['series'][series_name]['photos'])
        series_buttons.append(f"{series_name} ({photo_count} —Ñ–æ—Ç–æ)")
    
    keyboard = create_two_column_keyboard(series_buttons)
    keyboard.append([KeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        f"üìñ –ì–∞–π–¥: {story_name}\n–í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )
    return SELECTING_SERIES

async def handle_series_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.channel_post:
        return SELECTING_SERIES
    
    series_text = update.message.text
    data = load_data()
    
    if series_text == "‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—Ä–∏–∏
        story_names = list(data['guides_data.json'].keys())
        keyboard = create_two_column_keyboard(story_names)
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text(
            'üéÆ –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é:',
            reply_markup=reply_markup
        )
        return SELECTING_STORY
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    series_name = series_text.split(' (')[0]  # –£–±–∏—Ä–∞–µ–º " (X —Ñ–æ—Ç–æ)"
    story_name = context.user_data.get('selected_story')
    
    if not story_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return SELECTING_STORY
    
    if (story_name not in data['guides_data.json'] or 
        series_name not in data['guides_data.json'][story_name]['series']):
        await update.message.reply_text("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return SELECTING_SERIES
    
    photos = data['guides_data.json'][story_name]['series'][series_name]['photos']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    for i, file_id in enumerate(photos, 1):
        await update.message.reply_photo(
            photo=file_id,
            caption=f"üéÆ –ì–∞–π–¥: {story_name}\nüìñ ‚Ññ: {series_name}\nüì∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {i}/{len(photos)}"
        )
    
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ –º–µ–Ω—é
    story_data = data['guides_data.json'][story_name]
    series_buttons = []
    for series in story_data['series']:
        photo_count = len(story_data['series'][series]['photos'])
        series_buttons.append(f"{series} ({photo_count} —Ñ–æ—Ç–æ)")
    
    keyboard = create_two_column_keyboard(series_buttons)
    keyboard.append([KeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏—è–º")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    return SELECTING_SERIES

def main():
    application = Application.builder().token(config.ADMIN_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.PHOTO, 
        handle_channel_post
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.TEXT,
        handle_channel_text
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–∞–±–ª–∏–∫) —Å ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_STORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_story_selection)
            ],
            SELECTING_SERIES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_series_selection)
            ],
        },
        fallbacks=[],
    )
    
    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ –æ—Ç–≤–µ—á–∞–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    application.run_polling()

if __name__ == '__main__':
    main()